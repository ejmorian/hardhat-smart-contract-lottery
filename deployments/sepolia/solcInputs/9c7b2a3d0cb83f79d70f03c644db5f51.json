{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract TypeAndVersionInterface {\n  function typeAndVersion() external pure virtual returns (string memory);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFV2WrapperInterface {\n  /**\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\n   * be relied option within the same transaction that the request was made.\n   */\n  function lastRequestId() external view returns (uint256);\n\n  /**\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\n   * @notice block.\n   *\n   * @dev This function relies on the transaction gas price which is not automatically set during\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   */\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\n\n  /**\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\n   *\n   * @dev This is a convenience function that can be called in simulation to better understand\n   * @dev pricing.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\n   */\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(\n    uint256 _requestId,\n    address _consumer,\n    uint256[] memory _words\n  ) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(uint64 _subId)\n    external\n    view\n    override\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    )\n  {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig()\n    external\n    pure\n    override\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    )\n  {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(uint64 _subId, address _consumer)\n    external\n    override\n    onlySubOwner(_subId)\n    onlyValidConsumer(_subId, _consumer)\n  {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFV2Wrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./ConfirmedOwner.sol\";\nimport \"./interfaces/TypeAndVersionInterface.sol\";\nimport \"./VRFConsumerBaseV2.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/AggregatorV3Interface.sol\";\nimport \"./interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"./interfaces/VRFV2WrapperInterface.sol\";\nimport \"./VRFV2WrapperConsumerBase.sol\";\n\n/**\n * @notice A wrapper for VRFCoordinatorV2 that provides an interface better suited to one-off\n * @notice requests for randomness.\n */\ncontract VRFV2Wrapper is ConfirmedOwner, TypeAndVersionInterface, VRFConsumerBaseV2, VRFV2WrapperInterface {\n  event WrapperFulfillmentFailed(uint256 indexed requestId, address indexed consumer);\n\n  LinkTokenInterface public immutable LINK;\n  AggregatorV3Interface public immutable LINK_ETH_FEED;\n  ExtendedVRFCoordinatorV2Interface public immutable COORDINATOR;\n  uint64 public immutable SUBSCRIPTION_ID;\n\n  // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\n  // and some arithmetic operations.\n  uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\n\n  // lastRequestId is the request ID of the most recent VRF V2 request made by this wrapper. This\n  // should only be relied on within the same transaction the request was made.\n  uint256 public override lastRequestId;\n\n  // Configuration fetched from VRFCoordinatorV2\n\n  // s_configured tracks whether this contract has been configured. If not configured, randomness\n  // requests cannot be made.\n  bool public s_configured;\n\n  // s_disabled disables the contract when true. When disabled, new VRF requests cannot be made\n  // but existing ones can still be fulfilled.\n  bool public s_disabled;\n\n  // s_fallbackWeiPerUnitLink is the backup LINK exchange rate used when the LINK/NATIVE feed is\n  // stale.\n  int256 private s_fallbackWeiPerUnitLink;\n\n  // s_stalenessSeconds is the number of seconds before we consider the feed price to be stale and\n  // fallback to fallbackWeiPerUnitLink.\n  uint32 private s_stalenessSeconds;\n\n  // s_fulfillmentFlatFeeLinkPPM is the flat fee in millionths of LINK that VRFCoordinatorV2\n  // charges.\n  uint32 private s_fulfillmentFlatFeeLinkPPM;\n\n  // Other configuration\n\n  // s_wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\n  // function. The cost for this gas is passed to the user.\n  uint32 private s_wrapperGasOverhead;\n\n  // s_coordinatorGasOverhead reflects the gas overhead of the coordinator's fulfillRandomWords\n  // function. The cost for this gas is billed to the subscription, and must therefor be included\n  // in the pricing for wrapped requests. This includes the gas costs of proof verification and\n  // payment calculation in the coordinator.\n  uint32 private s_coordinatorGasOverhead;\n\n  // s_wrapperPremiumPercentage is the premium ratio in percentage. For example, a value of 0\n  // indicates no premium. A value of 15 indicates a 15 percent premium.\n  uint8 private s_wrapperPremiumPercentage;\n\n  // s_keyHash is the key hash to use when requesting randomness. Fees are paid based on current gas\n  // fees, so this should be set to the highest gas lane on the network.\n  bytes32 s_keyHash;\n\n  // s_maxNumWords is the max number of words that can be requested in a single wrapped VRF request.\n  uint8 s_maxNumWords;\n\n  struct Callback {\n    address callbackAddress;\n    uint32 callbackGasLimit;\n    uint256 requestGasPrice;\n    int256 requestWeiPerUnitLink;\n    uint256 juelsPaid;\n  }\n  mapping(uint256 => Callback) /* requestID */ /* callback */\n    public s_callbacks;\n\n  constructor(\n    address _link,\n    address _linkEthFeed,\n    address _coordinator\n  ) ConfirmedOwner(msg.sender) VRFConsumerBaseV2(_coordinator) {\n    LINK = LinkTokenInterface(_link);\n    LINK_ETH_FEED = AggregatorV3Interface(_linkEthFeed);\n    COORDINATOR = ExtendedVRFCoordinatorV2Interface(_coordinator);\n\n    // Create this wrapper's subscription and add itself as a consumer.\n    uint64 subId = ExtendedVRFCoordinatorV2Interface(_coordinator).createSubscription();\n    SUBSCRIPTION_ID = subId;\n    ExtendedVRFCoordinatorV2Interface(_coordinator).addConsumer(subId, address(this));\n  }\n\n  /**\n   * @notice setConfig configures VRFV2Wrapper.\n   *\n   * @dev Sets wrapper-specific configuration based on the given parameters, and fetches any needed\n   * @dev VRFCoordinatorV2 configuration from the coordinator.\n   *\n   * @param _wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\n   *        function.\n   *\n   * @param _coordinatorGasOverhead reflects the gas overhead of the coordinator's\n   *        fulfillRandomWords function.\n   *\n   * @param _wrapperPremiumPercentage is the premium ratio in percentage for wrapper requests.\n   *\n   * @param _keyHash to use for requesting randomness.\n   */\n  function setConfig(\n    uint32 _wrapperGasOverhead,\n    uint32 _coordinatorGasOverhead,\n    uint8 _wrapperPremiumPercentage,\n    bytes32 _keyHash,\n    uint8 _maxNumWords\n  ) external onlyOwner {\n    s_wrapperGasOverhead = _wrapperGasOverhead;\n    s_coordinatorGasOverhead = _coordinatorGasOverhead;\n    s_wrapperPremiumPercentage = _wrapperPremiumPercentage;\n    s_keyHash = _keyHash;\n    s_maxNumWords = _maxNumWords;\n    s_configured = true;\n\n    // Get other configuration from coordinator\n    (, , s_stalenessSeconds, ) = COORDINATOR.getConfig();\n    s_fallbackWeiPerUnitLink = COORDINATOR.getFallbackWeiPerUnitLink();\n    (s_fulfillmentFlatFeeLinkPPM, , , , , , , , ) = COORDINATOR.getFeeConfig();\n  }\n\n  /**\n   * @notice getConfig returns the current VRFV2Wrapper configuration.\n   *\n   * @return fallbackWeiPerUnitLink is the backup LINK exchange rate used when the LINK/NATIVE feed\n   *         is stale.\n   *\n   * @return stalenessSeconds is the number of seconds before we consider the feed price to be stale\n   *         and fallback to fallbackWeiPerUnitLink.\n   *\n   * @return fulfillmentFlatFeeLinkPPM is the flat fee in millionths of LINK that VRFCoordinatorV2\n   *         charges.\n   *\n   * @return wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\n   *         function. The cost for this gas is passed to the user.\n   *\n   * @return coordinatorGasOverhead reflects the gas overhead of the coordinator's\n   *         fulfillRandomWords function.\n   *\n   * @return wrapperPremiumPercentage is the premium ratio in percentage. For example, a value of 0\n   *         indicates no premium. A value of 15 indicates a 15 percent premium.\n   *\n   * @return keyHash is the key hash to use when requesting randomness. Fees are paid based on\n   *         current gas fees, so this should be set to the highest gas lane on the network.\n   *\n   * @return maxNumWords is the max number of words that can be requested in a single wrapped VRF\n   *         request.\n   */\n  function getConfig()\n    external\n    view\n    returns (\n      int256 fallbackWeiPerUnitLink,\n      uint32 stalenessSeconds,\n      uint32 fulfillmentFlatFeeLinkPPM,\n      uint32 wrapperGasOverhead,\n      uint32 coordinatorGasOverhead,\n      uint8 wrapperPremiumPercentage,\n      bytes32 keyHash,\n      uint8 maxNumWords\n    )\n  {\n    return (\n      s_fallbackWeiPerUnitLink,\n      s_stalenessSeconds,\n      s_fulfillmentFlatFeeLinkPPM,\n      s_wrapperGasOverhead,\n      s_coordinatorGasOverhead,\n      s_wrapperPremiumPercentage,\n      s_keyHash,\n      s_maxNumWords\n    );\n  }\n\n  /**\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\n   * @notice block.\n   *\n   * @dev This function relies on the transaction gas price which is not automatically set during\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   */\n  function calculateRequestPrice(uint32 _callbackGasLimit)\n    external\n    view\n    override\n    onlyConfiguredNotDisabled\n    returns (uint256)\n  {\n    int256 weiPerUnitLink = getFeedData();\n    return calculateRequestPriceInternal(_callbackGasLimit, tx.gasprice, weiPerUnitLink);\n  }\n\n  /**\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\n   *\n   * @dev This is a convenience function that can be called in simulation to better understand\n   * @dev pricing.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\n   */\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei)\n    external\n    view\n    override\n    onlyConfiguredNotDisabled\n    returns (uint256)\n  {\n    int256 weiPerUnitLink = getFeedData();\n    return calculateRequestPriceInternal(_callbackGasLimit, _requestGasPriceWei, weiPerUnitLink);\n  }\n\n  function calculateRequestPriceInternal(\n    uint256 _gas,\n    uint256 _requestGasPrice,\n    int256 _weiPerUnitLink\n  ) internal view returns (uint256) {\n    uint256 baseFee = (1e18 * _requestGasPrice * (_gas + s_wrapperGasOverhead + s_coordinatorGasOverhead)) /\n      uint256(_weiPerUnitLink);\n\n    uint256 feeWithPremium = (baseFee * (s_wrapperPremiumPercentage + 100)) / 100;\n\n    uint256 feeWithFlatFee = feeWithPremium + (1e12 * uint256(s_fulfillmentFlatFeeLinkPPM));\n\n    return feeWithFlatFee;\n  }\n\n  /**\n   * @notice onTokenTransfer is called by LinkToken upon payment for a VRF request.\n   *\n   * @dev Reverts if payment is too low.\n   *\n   * @param _sender is the sender of the payment, and the address that will receive a VRF callback\n   *        upon fulfillment.\n   *\n   * @param _amount is the amount of LINK paid in Juels.\n   *\n   * @param _data is the abi-encoded VRF request parameters: uint32 callbackGasLimit,\n   *        uint16 requestConfirmations, and uint32 numWords.\n   */\n  function onTokenTransfer(\n    address _sender,\n    uint256 _amount,\n    bytes calldata _data\n  ) external onlyConfiguredNotDisabled {\n    require(msg.sender == address(LINK), \"only callable from LINK\");\n\n    (uint32 callbackGasLimit, uint16 requestConfirmations, uint32 numWords) = abi.decode(\n      _data,\n      (uint32, uint16, uint32)\n    );\n    uint32 eip150Overhead = getEIP150Overhead(callbackGasLimit);\n    int256 weiPerUnitLink = getFeedData();\n    uint256 price = calculateRequestPriceInternal(callbackGasLimit, tx.gasprice, weiPerUnitLink);\n    require(_amount >= price, \"fee too low\");\n    require(numWords <= s_maxNumWords, \"numWords too high\");\n\n    uint256 requestId = COORDINATOR.requestRandomWords(\n      s_keyHash,\n      SUBSCRIPTION_ID,\n      requestConfirmations,\n      callbackGasLimit + eip150Overhead + s_wrapperGasOverhead,\n      numWords\n    );\n    s_callbacks[requestId] = Callback({\n      callbackAddress: _sender,\n      callbackGasLimit: callbackGasLimit,\n      requestGasPrice: tx.gasprice,\n      requestWeiPerUnitLink: weiPerUnitLink,\n      juelsPaid: _amount\n    });\n    lastRequestId = requestId;\n  }\n\n  /**\n   * @notice withdraw is used by the VRFV2Wrapper's owner to withdraw LINK revenue.\n   *\n   * @param _recipient is the address that should receive the LINK funds.\n   *\n   * @param _amount is the amount of LINK in Juels that should be withdrawn.\n   */\n  function withdraw(address _recipient, uint256 _amount) external onlyOwner {\n    LINK.transfer(_recipient, _amount);\n  }\n\n  /**\n   * @notice enable this contract so that new requests can be accepted.\n   */\n  function enable() external onlyOwner {\n    s_disabled = false;\n  }\n\n  /**\n   * @notice disable this contract so that new requests will be rejected. When disabled, new requests\n   * @notice will revert but existing requests can still be fulfilled.\n   */\n  function disable() external onlyOwner {\n    s_disabled = true;\n  }\n\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n    Callback memory callback = s_callbacks[_requestId];\n    delete s_callbacks[_requestId];\n    require(callback.callbackAddress != address(0), \"request not found\"); // This should never happen\n\n    VRFV2WrapperConsumerBase c;\n    bytes memory resp = abi.encodeWithSelector(c.rawFulfillRandomWords.selector, _requestId, _randomWords);\n\n    bool success = callWithExactGas(callback.callbackGasLimit, callback.callbackAddress, resp);\n    if (!success) {\n      emit WrapperFulfillmentFailed(_requestId, callback.callbackAddress);\n    }\n  }\n\n  function getFeedData() private view returns (int256) {\n    bool staleFallback = s_stalenessSeconds > 0;\n    uint256 timestamp;\n    int256 weiPerUnitLink;\n    (, weiPerUnitLink, , timestamp, ) = LINK_ETH_FEED.latestRoundData();\n    // solhint-disable-next-line not-rely-on-time\n    if (staleFallback && s_stalenessSeconds < block.timestamp - timestamp) {\n      weiPerUnitLink = s_fallbackWeiPerUnitLink;\n    }\n    require(weiPerUnitLink >= 0, \"Invalid LINK wei price\");\n    return weiPerUnitLink;\n  }\n\n  /**\n   * @dev Calculates extra amount of gas required for running an assembly call() post-EIP150.\n   */\n  function getEIP150Overhead(uint32 gas) private pure returns (uint32) {\n    return gas / 63 + 1;\n  }\n\n  /**\n   * @dev calls target address with exactly gasAmount gas and data as calldata\n   * or reverts if at least gasAmount gas is not available.\n   */\n  function callWithExactGas(\n    uint256 gasAmount,\n    address target,\n    bytes memory data\n  ) private returns (bool success) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let g := gas()\n      // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\n      // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\n      // as we do not want to provide them with less, however that check itself costs\n      // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\n      // to revert if gasAmount >  63//64*gas available.\n      if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\n        revert(0, 0)\n      }\n      g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\n      // if g - g//64 <= gasAmount, revert\n      // (we subtract g//64 because of EIP-150)\n      if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\n        revert(0, 0)\n      }\n      // solidity calls check that a contract actually exists at the destination, so we do the same\n      if iszero(extcodesize(target)) {\n        revert(0, 0)\n      }\n      // call and return whether we succeeded. ignore return data\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\n      success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\n    }\n    return success;\n  }\n\n  function typeAndVersion() external pure virtual override returns (string memory) {\n    return \"VRFV2Wrapper 1.0.0\";\n  }\n\n  modifier onlyConfiguredNotDisabled() {\n    require(s_configured, \"wrapper is not configured\");\n    require(!s_disabled, \"wrapper is disabled\");\n    _;\n  }\n}\n\ninterface ExtendedVRFCoordinatorV2Interface is VRFCoordinatorV2Interface {\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    );\n\n  function getFallbackWeiPerUnitLink() external view returns (int256);\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/VRFV2WrapperInterface.sol\";\n\n/** *******************************************************************************\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\n * ********************************************************************************\n * @dev PURPOSE\n *\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\n * @dev paying up front rather than at fulfillment.\n *\n * @dev Since the price is determined using the gas price of the request transaction rather than\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\n * @dev paying for the request based on the current pricing.\n *\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\n * @dev fulfillment with the randomness result.\n */\nabstract contract VRFV2WrapperConsumerBase {\n  LinkTokenInterface internal immutable LINK;\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\n\n  /**\n   * @param _link is the address of LinkToken\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\n   */\n  constructor(address _link, address _vrfV2Wrapper) {\n    LINK = LinkTokenInterface(_link);\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\n  }\n\n  /**\n   * @dev Requests randomness from the VRF V2 wrapper.\n   *\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\n   *        fulfillRandomWords function.\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\n   *        request. A higher number of confirmations increases security by reducing the likelihood\n   *        that a chain re-org changes a published randomness outcome.\n   * @param _numWords is the number of random words to request.\n   *\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\n   */\n  function requestRandomness(\n    uint32 _callbackGasLimit,\n    uint16 _requestConfirmations,\n    uint32 _numWords\n  ) internal returns (uint256 requestId) {\n    LINK.transferAndCall(\n      address(VRF_V2_WRAPPER),\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\n    );\n    return VRF_V2_WRAPPER.lastRequestId();\n  }\n\n  /**\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\n   * @notice implement it.\n   *\n   * @param _requestId is the VRF V2 request ID.\n   * @param _randomWords is the randomness result.\n   */\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\n\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\n    require(msg.sender == address(VRF_V2_WRAPPER), \"only VRF V2 wrapper can fulfill\");\n    fulfillRandomWords(_requestId, _randomWords);\n  }\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    },
    "contracts/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    },
    "contracts/mocks/VRFV2Wrapper.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/VRFV2Wrapper.sol\";\n"
    },
    "contracts/Raffle.sol": {
      "content": "//Raffle\n// Enter the lottery (1Eth per entry)\n// Pick a random winner\n// Winner selection to be selected per week\n// use a chainlink oracle for randomness\n// automated execution (chainlink keepers)\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\n\nerror enterRaffle__insufficientAmount();\nerror Raffle__TransferFailed();\nerror Raffle__NotOpened();\nerror Raffle__UpKeepNotNeeded(\n    uint256 currentBalance,\n    uint256 participants,\n    uint256 raffleState\n);\n\n/**\n * @title A Sample Raffle Contract\n * @author ejmorian\n * @notice This contract is for creating a untamperable decentralise smart contracts\n * @dev this implements chainlink VRFV2 and chainlink keepers\n */\n\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\n    /**Type Declarations */\n    enum RaffleState {\n        OPEN,\n        CALCULATING\n    }\n\n    /* State Variables */\n    uint256 private immutable i_entranceFee;\n    address payable[] public s_participants;\n    address private winner;\n    /** VRF variables */\n    bytes32 private immutable i_keyHash;\n    uint64 private immutable i_subId;\n    uint16 private constant c_requestConfirmation = 3;\n    uint32 private immutable i_callBackGaslimit;\n    uint32 private constant c_numWords = 1;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    /**Raffle Variables */\n    uint256 private s_previousTimestamp;\n    uint256 private constant c_interval = 120;\n    RaffleState private s_raffleState;\n\n    /* Events */\n    event RaffleEnter(address indexed participant);\n    event requestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed recentWinner);\n\n    /**Functions */\n    constructor(\n        address vrfCoordinatorV2, // 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\n        bytes32 _keyHash, // 0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c\n        uint256 entranceFee,\n        uint64 subId,\n        uint32 callBackGaslimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_keyHash = _keyHash;\n        i_subId = subId;\n        i_callBackGaslimit = callBackGaslimit;\n        s_raffleState = RaffleState.OPEN;\n        s_previousTimestamp = block.timestamp;\n    }\n\n    function enterRaffle() external payable {\n        // require(msg.value > i_entranceFee)\n        if (msg.value < i_entranceFee) {\n            revert enterRaffle__insufficientAmount();\n        }\n\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Raffle__NotOpened();\n        }\n\n        s_participants.push(payable(msg.sender));\n\n        emit RaffleEnter(msg.sender);\n    }\n\n    function pickRandomWinner() internal {\n        s_raffleState = RaffleState.CALCULATING;\n        //request the random number\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_keyHash,\n            i_subId,\n            c_requestConfirmation,\n            i_callBackGaslimit,\n            c_numWords\n        );\n        //once we get it, do something with it\n        // 2 transaction process\n\n        emit requestedRaffleWinner(requestId);\n    }\n\n    function fulfillRandomWords(\n        uint256 /*requestId*/,\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 winnerIndex = randomWords[0] % s_participants.length;\n        winner = s_participants[winnerIndex];\n\n        (bool success, ) = payable(winner).call{value: address(this).balance}(\n            \"\"\n        );\n\n        if (!success) {\n            revert Raffle__TransferFailed();\n        }\n        s_participants = new address payable[](0);\n        s_previousTimestamp = block.timestamp;\n        if (s_raffleState != RaffleState.OPEN) {\n            s_raffleState = RaffleState.OPEN;\n        }\n\n        emit WinnerPicked(winner);\n    }\n\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\n    {\n        bool isOpen = s_raffleState == RaffleState.OPEN;\n        bool intervalPassed = (block.timestamp - s_previousTimestamp) >\n            c_interval;\n        bool hasPlayers = s_participants.length > 0;\n        bool hasBalance = address(this).balance > 0;\n\n        upkeepNeeded = isOpen && intervalPassed && hasPlayers && hasBalance;\n    }\n\n    function performUpkeep(bytes calldata /*performData*/) external override {\n        (bool upKeepNeeded, ) = checkUpkeep(\"\");\n\n        if (!upKeepNeeded) {\n            revert Raffle__UpKeepNotNeeded(\n                address(this).balance,\n                s_participants.length,\n                uint256(s_raffleState)\n            );\n        }\n\n        if ((block.timestamp - s_previousTimestamp) > c_interval) {\n            s_previousTimestamp = block.timestamp;\n\n            pickRandomWinner();\n        }\n    }\n\n    /** pure/view */\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getParticipant(uint256 index) public view returns (address) {\n        return s_participants[index];\n    }\n\n    function getParticipantNumbers() public view returns (uint256) {\n        return s_participants.length;\n    }\n\n    function getWinner() public view returns (address) {\n        return winner;\n    }\n\n    function getRaffleState() public view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    function getPreviousTimestampt() public view returns (uint256) {\n        return s_previousTimestamp;\n    }\n\n    // function pickRandomWinner() external {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}