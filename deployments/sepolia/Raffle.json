{
  "address": "0xc8117468F7D64a6737ea2A0979A7A582aC32985a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGaslimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_UnAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "enterRaffle__insufficientAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedRaffles_winner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recents_winner",
          "type": "address"
        }
      ],
      "name": "s_winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallBackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getParticipant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipantNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreviousTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_participants",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setRaffleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48ef2d3b591538a92f6d2d639340f7a859df943ad41e9fee282693e5e723f4a7",
  "receipt": {
    "to": null,
    "from": "0xb5D5A6ED845dBcb835fD13e58be4d404b5601F0F",
    "contractAddress": "0xc8117468F7D64a6737ea2A0979A7A582aC32985a",
    "transactionIndex": 4,
    "gasUsed": "1444482",
    "logsBloom": "0x
    "blockHash": "0xbf873f481654498a74e6108308bc431feed5df71f41af2600ac271beca008ecd",
    "transactionHash": "0x48ef2d3b591538a92f6d2d639340f7a859df943ad41e9fee282693e5e723f4a7",
    "logs": [],
    "blockNumber": 3308074,
    "cumulativeGasUsed": "3407888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "10000000000000000",
    "1184",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "8736e75aa45704a7ed5d9ecaa9f3255e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGaslimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_UnAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"enterRaffle__insufficientAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedRaffles_winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recents_winner\",\"type\":\"address\"}],\"name\":\"s_winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallBackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_participants\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setRaffleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ejmorian\",\"details\":\"this implements chainlink VRFV2 and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions \"},\"getEntranceFee()\":{\"notice\":\"pure/view \"}},\"notice\":\"This contract is for creating a untamperable decentralise smart contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Raffle\\n// Enter the lottery (1Eth per entry)\\n// Pick a random s_winner\\n// s_winner selection to be selected per week\\n// use a chainlink oracle for randomness\\n// automated execution (chainlink keepers)\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror enterRaffle__insufficientAmount();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpened();\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 participants,\\n    uint256 raffleState\\n);\\nerror Raffle_UnAuthorised();\\n\\n/**\\n * @title A Sample Raffle Contract\\n * @author ejmorian\\n * @notice This contract is for creating a untamperable decentralise smart contracts\\n * @dev this implements chainlink VRFV2 and chainlink keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /**Type Declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    modifier OnlyOwner() {\\n        if (msg.sender != s_owner) {\\n            revert Raffle_UnAuthorised();\\n        }\\n        _;\\n    }\\n\\n    /* State Variables */\\n    address private immutable s_owner;\\n    address payable[] public s_participants;\\n    uint256 private s_previousTimestamp;\\n    RaffleState private s_raffleState;\\n    address private s_winner;\\n\\n    uint32 private immutable i_callBackGaslimit;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subId;\\n    uint256 private immutable i_entranceFee;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint256 private immutable i_interval;\\n\\n    uint16 private constant c_requestConfirmation = 3;\\n    uint32 private constant c_numWords = 1;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed participant);\\n    event requestedRaffles_winner(uint256 indexed requestId);\\n    event s_winnerPicked(address indexed recents_winner);\\n\\n    /**Functions */\\n    constructor(\\n        address vrfCoordinatorV2, // 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\n        bytes32 keyHash, // 0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c\\n        uint256 entranceFee,\\n        uint64 subId,\\n        uint32 callBackGaslimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_keyHash = keyHash;\\n        i_subId = subId;\\n        i_callBackGaslimit = callBackGaslimit;\\n        i_interval = interval;\\n        s_raffleState = RaffleState.OPEN;\\n        s_previousTimestamp = block.timestamp;\\n        s_owner = msg.sender;\\n    }\\n\\n    function enterRaffle() external payable {\\n        // require(msg.value > i_entranceFee)\\n        if (msg.value < i_entranceFee) {\\n            revert enterRaffle__insufficientAmount();\\n        }\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpened();\\n        }\\n\\n        s_participants.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function pickRandomWinner() internal {\\n        s_raffleState = RaffleState.CALCULATING;\\n        //request the random number\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subId,\\n            c_requestConfirmation,\\n            i_callBackGaslimit,\\n            c_numWords\\n        );\\n        //once we get it, do something with it\\n        // 2 transaction process\\n\\n        emit requestedRaffles_winner(requestId);\\n    }\\n\\n    function payWinner(address payable winner) internal {\\n        (bool success, ) = payable(winner).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 s_winnerIndex = randomWords[0] % s_participants.length;\\n        s_winner = s_participants[s_winnerIndex];\\n\\n        payWinner(payable(s_winner));\\n\\n        s_participants = new address payable[](0);\\n        s_previousTimestamp = block.timestamp;\\n        if (s_raffleState != RaffleState.OPEN) {\\n            s_raffleState = RaffleState.OPEN;\\n        }\\n\\n        emit s_winnerPicked(s_winner);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\n        bool intervalPassed = (block.timestamp - s_previousTimestamp) >\\n            i_interval;\\n        bool hasPlayers = s_participants.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = isOpen && intervalPassed && hasPlayers && hasBalance;\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_participants.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        s_previousTimestamp = block.timestamp;\\n\\n        pickRandomWinner();\\n    }\\n\\n    function setRaffleState(RaffleState _state) public OnlyOwner {\\n        s_raffleState = _state;\\n    }\\n\\n    /** pure/view */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getParticipant(uint256 index) public view returns (address) {\\n        return s_participants[index];\\n    }\\n\\n    function getParticipantNumbers() public view returns (uint256) {\\n        return s_participants.length;\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        return s_winner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getPreviousTimestamp() public view returns (uint256) {\\n        return s_previousTimestamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getKeyHash() public view returns (bytes32) {\\n        return i_keyHash;\\n    }\\n\\n    function getVrfCoordinator()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinator;\\n    }\\n\\n    function getSubId() public view returns (uint64) {\\n        return i_subId;\\n    }\\n\\n    function getCallBackGasLimit() public view returns (uint32) {\\n        return i_callBackGaslimit;\\n    }\\n\\n    // function pickRandomWinner() external {}\\n}\\n\",\"keccak256\":\"0x64b835e6665a9e56d2a83bacae9308fd03ddcda2d143af153c051b6f002e44cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162001cbc38038062001cbc8339818101604052810190620000389190620002c9565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508361012081815250508573ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508460e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff1660c08163ffffffff16815250508061016081815250506000600260006101000a81548160ff0219169083600181111562000117576200011662000365565b5b0217905550426001819055503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050505050505062000394565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001958262000168565b9050919050565b620001a78162000188565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b6000819050919050565b620001e281620001cd565b8114620001ee57600080fd5b50565b6000815190506200020281620001d7565b92915050565b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600067ffffffffffffffff82169050919050565b620002628162000243565b81146200026e57600080fd5b50565b600081519050620002828162000257565b92915050565b600063ffffffff82169050919050565b620002a38162000288565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b60008060008060008060c08789031215620002e957620002e862000163565b5b6000620002f989828a01620001b6565b96505060206200030c89828a01620001f1565b95505060406200031f89828a016200022c565b94505060606200033289828a0162000271565b93505060806200034589828a01620002b2565b92505060a06200035889828a016200022c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051610160516118916200042b6000396000818161080601526108e701526000818161041a0152610c250152600081816103f2015261056a0152600081816109c10152610c820152600081816106db0152610c610152600081816107030152610ca50152600061090d0152600081816104aa01526104fe01526118916000f3fe6080604052600436106100fe5760003560e01c80633cdb9361116100955780638df5a6a4116100645780638df5a6a4146103075780638e7ea5b21461034457806391ad27b41461036f5780639eb6a5a81461039a578063fbc6ba6f146103c3576100fe565b80633cdb93611461024a5780634585e33b146102755780636e04ff0d1461029e578063744b68ba146102dc576100fe565b80631b9db2ef116100d15780631b9db2ef146101af5780631fe543e3146101ec5780632cfcc53914610215578063331bf1251461021f576100fe565b806309bc33a7146101035780630cb4a29d1461012e578063115cbaf51461015957806315ac565f14610184575b600080fd5b34801561010f57600080fd5b506101186103ee565b6040516101259190610ec2565b60405180910390f35b34801561013a57600080fd5b50610143610416565b6040516101509190610f5c565b60405180910390f35b34801561016557600080fd5b5061016e61043e565b60405161017b9190610fee565b60405180910390f35b34801561019057600080fd5b50610199610455565b6040516101a69190610ec2565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d19190611049565b610461565b6040516101e39190611097565b60405180910390f35b3480156101f857600080fd5b50610213600480360381019061020e919061120b565b6104a8565b005b61021d610568565b005b34801561022b57600080fd5b506102346106d7565b6040516102419190611280565b60405180910390f35b34801561025657600080fd5b5061025f6106ff565b60405161026c91906112ba565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190611330565b610727565b005b3480156102aa57600080fd5b506102c560048036038101906102c09190611432565b6107c4565b6040516102d3929190611515565b60405180910390f35b3480156102e857600080fd5b506102f1610870565b6040516102fe9190610ec2565b60405180910390f35b34801561031357600080fd5b5061032e60048036038101906103299190611049565b61087a565b60405161033b9190611566565b60405180910390f35b34801561035057600080fd5b506103596108b9565b6040516103669190611097565b60405180910390f35b34801561037b57600080fd5b506103846108e3565b6040516103919190610ec2565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc91906115a6565b61090b565b005b3480156103cf57600080fd5b506103d86109bd565b6040516103e591906115f6565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b60008080549050905090565b600080828154811061047657610475611611565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610551929190611640565b60405180910390fd5b61056482826109e5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156105c2576040517fa24c020a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156105d6576105d5610f77565b5b600260009054906101000a900460ff1660018111156105f8576105f7610f77565b5b1461062f576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610741604051806020016040528060008152506107c4565b509050806107b05747600080549050600260009054906101000a900460ff16600181111561077257610771610f77565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016107a793929190611669565b60405180910390fd5b426001819055506107bf610bf6565b505050565b6000606060008060018111156107dd576107dc610f77565b5b600260009054906101000a900460ff1660018111156107ff576107fe610f77565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261083391906116cf565b119050600080600080549050119050600080471190508380156108535750825b801561085c5750815b80156108655750805b955050505050915091565b6000600154905090565b6000818154811061088a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610990576040517f13097f2100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548160ff021916908360018111156109b5576109b4610f77565b5b021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808054905082600081518110610a00576109ff611611565b5b6020026020010151610a129190611732565b905060008181548110610a2857610a27611611565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610abe600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610d5b565b600067ffffffffffffffff811115610ad957610ad86110c8565b5b604051908082528060200260200182016040528015610b075781602001602082028036833780820191505090505b5060009080519060200190610b1d929190610e02565b504260018190555060006001811115610b3957610b38610f77565b5b600260009054906101000a900460ff166001811115610b5b57610b5a610f77565b5b14610b8c576000600260006101000a81548160ff02191690836001811115610b8657610b85610f77565b5b02179055505b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f294199a1df906669a7ed961cc27178df080080aef83ba06a81b3ebc52374ee4960405160405180910390a2505050565b6001600260006101000a81548160ff02191690836001811115610c1c57610c1b610f77565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610ce6959493929190611780565b6020604051808303816000875af1158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2991906117e8565b9050807fed78291397f3061d19ba61a10be233e58e9e0ff8d4ce49da9dfe865239264f6460405160405180910390a250565b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610d8190611846565b60006040518083038185875af1925050503d8060008114610dbe576040519150601f19603f3d011682016040523d82523d6000602084013e610dc3565b606091505b5050905080610dfe576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b828054828255906000526020600020908101928215610e7b579160200282015b82811115610e7a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610e22565b5b509050610e889190610e8c565b5090565b5b80821115610ea5576000816000905550600101610e8d565b5090565b6000819050919050565b610ebc81610ea9565b82525050565b6000602082019050610ed76000830184610eb3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f22610f1d610f1884610edd565b610efd565b610edd565b9050919050565b6000610f3482610f07565b9050919050565b6000610f4682610f29565b9050919050565b610f5681610f3b565b82525050565b6000602082019050610f716000830184610f4d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fb757610fb6610f77565b5b50565b6000819050610fc882610fa6565b919050565b6000610fd882610fba565b9050919050565b610fe881610fcd565b82525050565b60006020820190506110036000830184610fdf565b92915050565b6000604051905090565b600080fd5b600080fd5b61102681610ea9565b811461103157600080fd5b50565b6000813590506110438161101d565b92915050565b60006020828403121561105f5761105e611013565b5b600061106d84828501611034565b91505092915050565b600061108182610edd565b9050919050565b61109181611076565b82525050565b60006020820190506110ac6000830184611088565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611100826110b7565b810181811067ffffffffffffffff8211171561111f5761111e6110c8565b5b80604052505050565b6000611132611009565b905061113e82826110f7565b919050565b600067ffffffffffffffff82111561115e5761115d6110c8565b5b602082029050602081019050919050565b600080fd5b600061118761118284611143565b611128565b905080838252602082019050602084028301858111156111aa576111a961116f565b5b835b818110156111d357806111bf8882611034565b8452602084019350506020810190506111ac565b5050509392505050565b600082601f8301126111f2576111f16110b2565b5b8135611202848260208601611174565b91505092915050565b6000806040838503121561122257611221611013565b5b600061123085828601611034565b925050602083013567ffffffffffffffff81111561125157611250611018565b5b61125d858286016111dd565b9150509250929050565b6000819050919050565b61127a81611267565b82525050565b60006020820190506112956000830184611271565b92915050565b600063ffffffff82169050919050565b6112b48161129b565b82525050565b60006020820190506112cf60008301846112ab565b92915050565b600080fd5b60008083601f8401126112f0576112ef6110b2565b5b8235905067ffffffffffffffff81111561130d5761130c6112d5565b5b6020830191508360018202830111156113295761132861116f565b5b9250929050565b6000806020838503121561134757611346611013565b5b600083013567ffffffffffffffff81111561136557611364611018565b5b611371858286016112da565b92509250509250929050565b600080fd5b600067ffffffffffffffff82111561139d5761139c6110c8565b5b6113a6826110b7565b9050602081019050919050565b82818337600083830152505050565b60006113d56113d084611382565b611128565b9050828152602081018484840111156113f1576113f061137d565b5b6113fc8482856113b3565b509392505050565b600082601f830112611419576114186110b2565b5b81356114298482602086016113c2565b91505092915050565b60006020828403121561144857611447611013565b5b600082013567ffffffffffffffff81111561146657611465611018565b5b61147284828501611404565b91505092915050565b60008115159050919050565b6114908161147b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114d05780820151818401526020810190506114b5565b60008484015250505050565b60006114e782611496565b6114f181856114a1565b93506115018185602086016114b2565b61150a816110b7565b840191505092915050565b600060408201905061152a6000830185611487565b818103602083015261153c81846114dc565b90509392505050565b600061155082610edd565b9050919050565b61156081611545565b82525050565b600060208201905061157b6000830184611557565b92915050565b6002811061158e57600080fd5b50565b6000813590506115a081611581565b92915050565b6000602082840312156115bc576115bb611013565b5b60006115ca84828501611591565b91505092915050565b600067ffffffffffffffff82169050919050565b6115f0816115d3565b82525050565b600060208201905061160b60008301846115e7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506116556000830185611088565b6116626020830184611088565b9392505050565b600060608201905061167e6000830186610eb3565b61168b6020830185610eb3565b6116986040830184610eb3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116da82610ea9565b91506116e583610ea9565b92508282039050818111156116fd576116fc6116a0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061173d82610ea9565b915061174883610ea9565b92508261175857611757611703565b5b828206905092915050565b600061ffff82169050919050565b61177a81611763565b82525050565b600060a0820190506117956000830188611271565b6117a260208301876115e7565b6117af6040830186611771565b6117bc60608301856112ab565b6117c960808301846112ab565b9695505050505050565b6000815190506117e28161101d565b92915050565b6000602082840312156117fe576117fd611013565b5b600061180c848285016117d3565b91505092915050565b600081905092915050565b50565b6000611830600083611815565b915061183b82611820565b600082019050919050565b600061185182611823565b915081905091905056fea2646970667358221220fd6afa2bb1c018e3e075e143ee85b2908bea5c0c5b5690c17d8dff98bcf02b1864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80633cdb9361116100955780638df5a6a4116100645780638df5a6a4146103075780638e7ea5b21461034457806391ad27b41461036f5780639eb6a5a81461039a578063fbc6ba6f146103c3576100fe565b80633cdb93611461024a5780634585e33b146102755780636e04ff0d1461029e578063744b68ba146102dc576100fe565b80631b9db2ef116100d15780631b9db2ef146101af5780631fe543e3146101ec5780632cfcc53914610215578063331bf1251461021f576100fe565b806309bc33a7146101035780630cb4a29d1461012e578063115cbaf51461015957806315ac565f14610184575b600080fd5b34801561010f57600080fd5b506101186103ee565b6040516101259190610ec2565b60405180910390f35b34801561013a57600080fd5b50610143610416565b6040516101509190610f5c565b60405180910390f35b34801561016557600080fd5b5061016e61043e565b60405161017b9190610fee565b60405180910390f35b34801561019057600080fd5b50610199610455565b6040516101a69190610ec2565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d19190611049565b610461565b6040516101e39190611097565b60405180910390f35b3480156101f857600080fd5b50610213600480360381019061020e919061120b565b6104a8565b005b61021d610568565b005b34801561022b57600080fd5b506102346106d7565b6040516102419190611280565b60405180910390f35b34801561025657600080fd5b5061025f6106ff565b60405161026c91906112ba565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190611330565b610727565b005b3480156102aa57600080fd5b506102c560048036038101906102c09190611432565b6107c4565b6040516102d3929190611515565b60405180910390f35b3480156102e857600080fd5b506102f1610870565b6040516102fe9190610ec2565b60405180910390f35b34801561031357600080fd5b5061032e60048036038101906103299190611049565b61087a565b60405161033b9190611566565b60405180910390f35b34801561035057600080fd5b506103596108b9565b6040516103669190611097565b60405180910390f35b34801561037b57600080fd5b506103846108e3565b6040516103919190610ec2565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc91906115a6565b61090b565b005b3480156103cf57600080fd5b506103d86109bd565b6040516103e591906115f6565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b60008080549050905090565b600080828154811061047657610475611611565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610551929190611640565b60405180910390fd5b61056482826109e5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156105c2576040517fa24c020a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156105d6576105d5610f77565b5b600260009054906101000a900460ff1660018111156105f8576105f7610f77565b5b1461062f576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610741604051806020016040528060008152506107c4565b509050806107b05747600080549050600260009054906101000a900460ff16600181111561077257610771610f77565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016107a793929190611669565b60405180910390fd5b426001819055506107bf610bf6565b505050565b6000606060008060018111156107dd576107dc610f77565b5b600260009054906101000a900460ff1660018111156107ff576107fe610f77565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261083391906116cf565b119050600080600080549050119050600080471190508380156108535750825b801561085c5750815b80156108655750805b955050505050915091565b6000600154905090565b6000818154811061088a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610990576040517f13097f2100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548160ff021916908360018111156109b5576109b4610f77565b5b021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808054905082600081518110610a00576109ff611611565b5b6020026020010151610a129190611732565b905060008181548110610a2857610a27611611565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610abe600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610d5b565b600067ffffffffffffffff811115610ad957610ad86110c8565b5b604051908082528060200260200182016040528015610b075781602001602082028036833780820191505090505b5060009080519060200190610b1d929190610e02565b504260018190555060006001811115610b3957610b38610f77565b5b600260009054906101000a900460ff166001811115610b5b57610b5a610f77565b5b14610b8c576000600260006101000a81548160ff02191690836001811115610b8657610b85610f77565b5b02179055505b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f294199a1df906669a7ed961cc27178df080080aef83ba06a81b3ebc52374ee4960405160405180910390a2505050565b6001600260006101000a81548160ff02191690836001811115610c1c57610c1b610f77565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610ce6959493929190611780565b6020604051808303816000875af1158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2991906117e8565b9050807fed78291397f3061d19ba61a10be233e58e9e0ff8d4ce49da9dfe865239264f6460405160405180910390a250565b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610d8190611846565b60006040518083038185875af1925050503d8060008114610dbe576040519150601f19603f3d011682016040523d82523d6000602084013e610dc3565b606091505b5050905080610dfe576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b828054828255906000526020600020908101928215610e7b579160200282015b82811115610e7a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610e22565b5b509050610e889190610e8c565b5090565b5b80821115610ea5576000816000905550600101610e8d565b5090565b6000819050919050565b610ebc81610ea9565b82525050565b6000602082019050610ed76000830184610eb3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f22610f1d610f1884610edd565b610efd565b610edd565b9050919050565b6000610f3482610f07565b9050919050565b6000610f4682610f29565b9050919050565b610f5681610f3b565b82525050565b6000602082019050610f716000830184610f4d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fb757610fb6610f77565b5b50565b6000819050610fc882610fa6565b919050565b6000610fd882610fba565b9050919050565b610fe881610fcd565b82525050565b60006020820190506110036000830184610fdf565b92915050565b6000604051905090565b600080fd5b600080fd5b61102681610ea9565b811461103157600080fd5b50565b6000813590506110438161101d565b92915050565b60006020828403121561105f5761105e611013565b5b600061106d84828501611034565b91505092915050565b600061108182610edd565b9050919050565b61109181611076565b82525050565b60006020820190506110ac6000830184611088565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611100826110b7565b810181811067ffffffffffffffff8211171561111f5761111e6110c8565b5b80604052505050565b6000611132611009565b905061113e82826110f7565b919050565b600067ffffffffffffffff82111561115e5761115d6110c8565b5b602082029050602081019050919050565b600080fd5b600061118761118284611143565b611128565b905080838252602082019050602084028301858111156111aa576111a961116f565b5b835b818110156111d357806111bf8882611034565b8452602084019350506020810190506111ac565b5050509392505050565b600082601f8301126111f2576111f16110b2565b5b8135611202848260208601611174565b91505092915050565b6000806040838503121561122257611221611013565b5b600061123085828601611034565b925050602083013567ffffffffffffffff81111561125157611250611018565b5b61125d858286016111dd565b9150509250929050565b6000819050919050565b61127a81611267565b82525050565b60006020820190506112956000830184611271565b92915050565b600063ffffffff82169050919050565b6112b48161129b565b82525050565b60006020820190506112cf60008301846112ab565b92915050565b600080fd5b60008083601f8401126112f0576112ef6110b2565b5b8235905067ffffffffffffffff81111561130d5761130c6112d5565b5b6020830191508360018202830111156113295761132861116f565b5b9250929050565b6000806020838503121561134757611346611013565b5b600083013567ffffffffffffffff81111561136557611364611018565b5b611371858286016112da565b92509250509250929050565b600080fd5b600067ffffffffffffffff82111561139d5761139c6110c8565b5b6113a6826110b7565b9050602081019050919050565b82818337600083830152505050565b60006113d56113d084611382565b611128565b9050828152602081018484840111156113f1576113f061137d565b5b6113fc8482856113b3565b509392505050565b600082601f830112611419576114186110b2565b5b81356114298482602086016113c2565b91505092915050565b60006020828403121561144857611447611013565b5b600082013567ffffffffffffffff81111561146657611465611018565b5b61147284828501611404565b91505092915050565b60008115159050919050565b6114908161147b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114d05780820151818401526020810190506114b5565b60008484015250505050565b60006114e782611496565b6114f181856114a1565b93506115018185602086016114b2565b61150a816110b7565b840191505092915050565b600060408201905061152a6000830185611487565b818103602083015261153c81846114dc565b90509392505050565b600061155082610edd565b9050919050565b61156081611545565b82525050565b600060208201905061157b6000830184611557565b92915050565b6002811061158e57600080fd5b50565b6000813590506115a081611581565b92915050565b6000602082840312156115bc576115bb611013565b5b60006115ca84828501611591565b91505092915050565b600067ffffffffffffffff82169050919050565b6115f0816115d3565b82525050565b600060208201905061160b60008301846115e7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506116556000830185611088565b6116626020830184611088565b9392505050565b600060608201905061167e6000830186610eb3565b61168b6020830185610eb3565b6116986040830184610eb3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116da82610ea9565b91506116e583610ea9565b92508282039050818111156116fd576116fc6116a0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061173d82610ea9565b915061174883610ea9565b92508261175857611757611703565b5b828206905092915050565b600061ffff82169050919050565b61177a81611763565b82525050565b600060a0820190506117956000830188611271565b6117a260208301876115e7565b6117af6040830186611771565b6117bc60608301856112ab565b6117c960808301846112ab565b9695505050505050565b6000815190506117e28161101d565b92915050565b6000602082840312156117fe576117fd611013565b5b600061180c848285016117d3565b91505092915050565b600081905092915050565b50565b6000611830600083611815565b915061183b82611820565b600082019050919050565b600061185182611823565b915081905091905056fea2646970667358221220fd6afa2bb1c018e3e075e143ee85b2908bea5c0c5b5690c17d8dff98bcf02b1864736f6c63430008120033",
  "devdoc": {
    "author": "ejmorian",
    "details": "this implements chainlink VRFV2 and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "A Sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions "
      },
      "getEntranceFee()": {
        "notice": "pure/view "
      }
    },
    "notice": "This contract is for creating a untamperable decentralise smart contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2557,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 2559,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_previousTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2562,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)2539"
      },
      {
        "astId": 2564,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_winner",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)2539": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}