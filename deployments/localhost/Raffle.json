{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGaslimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "enterRaffle__insufficientAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedRaffles_winner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recents_winner",
          "type": "address"
        }
      ],
      "name": "s_winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getParticipant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipantNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreviousTimestampt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gets_winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_participants",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3c25f3567e9a765f96c46a57b602edb72d19835ffe2fcdad148a197c3be901e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1333383",
    "logsBloom": "0x
    "blockHash": "0x97b1c3a484a842bbb1ec874fa95ea2f66b1658b690366471538abfe0506a5cdf",
    "transactionHash": "0xb3c25f3567e9a765f96c46a57b602edb72d19835ffe2fcdad148a197c3be901e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1333383",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "10000000000000000",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "54dc8fcfde8eed73e910a422ee0e5e8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGaslimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"enterRaffle__insufficientAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedRaffles_winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recents_winner\",\"type\":\"address\"}],\"name\":\"s_winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousTimestampt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gets_winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_participants\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ejmorian\",\"details\":\"this implements chainlink VRFV2 and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions \"},\"getEntranceFee()\":{\"notice\":\"pure/view \"}},\"notice\":\"This contract is for creating a untamperable decentralise smart contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Raffle\\n// Enter the lottery (1Eth per entry)\\n// Pick a random s_winner\\n// s_winner selection to be selected per week\\n// use a chainlink oracle for randomness\\n// automated execution (chainlink keepers)\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror enterRaffle__insufficientAmount();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpened();\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 participants,\\n    uint256 raffleState\\n);\\n\\n/**\\n * @title A Sample Raffle Contract\\n * @author ejmorian\\n * @notice This contract is for creating a untamperable decentralise smart contracts\\n * @dev this implements chainlink VRFV2 and chainlink keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /**Type Declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Variables */\\n\\n    address payable[] public s_participants;\\n    uint256 private s_previousTimestamp;\\n    RaffleState private s_raffleState;\\n    address private s_winner;\\n\\n    uint32 private immutable i_callBackGaslimit;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subId;\\n    uint256 private immutable i_entranceFee;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint256 private immutable i_interval;\\n\\n    uint16 private constant c_requestConfirmation = 3;\\n    uint32 private constant c_numWords = 1;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed participant);\\n    event requestedRaffles_winner(uint256 indexed requestId);\\n    event s_winnerPicked(address indexed recents_winner);\\n\\n    /**Functions */\\n    constructor(\\n        address vrfCoordinatorV2, // 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\n        bytes32 keyHash, // 0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c\\n        uint256 entranceFee,\\n        uint64 subId,\\n        uint32 callBackGaslimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_keyHash = keyHash;\\n        i_subId = subId;\\n        i_callBackGaslimit = callBackGaslimit;\\n        i_interval = interval;\\n        s_raffleState = RaffleState.OPEN;\\n        s_previousTimestamp = block.timestamp;\\n    }\\n\\n    function enterRaffle() external payable {\\n        // require(msg.value > i_entranceFee)\\n        if (msg.value < i_entranceFee) {\\n            revert enterRaffle__insufficientAmount();\\n        }\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpened();\\n        }\\n\\n        s_participants.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function pickRandoms_winner() internal {\\n        s_raffleState = RaffleState.CALCULATING;\\n        //request the random number\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subId,\\n            c_requestConfirmation,\\n            i_callBackGaslimit,\\n            c_numWords\\n        );\\n        //once we get it, do something with it\\n        // 2 transaction process\\n\\n        emit requestedRaffles_winner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 s_winnerIndex = randomWords[0] % s_participants.length;\\n        s_winner = s_participants[s_winnerIndex];\\n\\n        (bool success, ) = payable(s_winner).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        s_participants = new address payable[](0);\\n        s_previousTimestamp = block.timestamp;\\n        if (s_raffleState != RaffleState.OPEN) {\\n            s_raffleState = RaffleState.OPEN;\\n        }\\n\\n        emit s_winnerPicked(s_winner);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\n        bool intervalPassed = (block.timestamp - s_previousTimestamp) >\\n            i_interval;\\n        bool hasPlayers = s_participants.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = isOpen && intervalPassed && hasPlayers && hasBalance;\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_participants.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        if ((block.timestamp - s_previousTimestamp) > i_interval) {\\n            s_previousTimestamp = block.timestamp;\\n\\n            pickRandoms_winner();\\n        }\\n    }\\n\\n    /** pure/view */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getParticipant(uint256 index) public view returns (address) {\\n        return s_participants[index];\\n    }\\n\\n    function getParticipantNumbers() public view returns (uint256) {\\n        return s_participants.length;\\n    }\\n\\n    function gets_winner() public view returns (address) {\\n        return s_winner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getPreviousTimestampt() public view returns (uint256) {\\n        return s_previousTimestamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getKeyHash() public view returns (bytes32) {\\n        return i_keyHash;\\n    }\\n\\n    function getVrfCoordinator()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinator;\\n    }\\n\\n    // function pickRandoms_winner() external {}\\n}\\n\",\"keccak256\":\"0x317b8cd94325724e76ea6f6e50b2bd9b1f4419940be683d9f07ca622fd374376\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a7538038062001a75833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508361010081815250508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508460c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff1660a08163ffffffff16815250508061014081815250506000600260006101000a81548160ff0219169083600181111562000116576200011562000330565b5b0217905550426001819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001f7565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611691620003e4600039600081816106ea0152818161077e015261082b01526000818161037a0152610b5401526000818161035201526104ca01526000610bb101526000818161063b0152610b9001526000610bd401526000818161040a015261045e01526116916000f3fe6080604052600436106100dd5760003560e01c8063331bf1251161007f5780636e04ff0d116100595780636e04ff0d1461027d5780638df5a6a4146102bb57806391ad27b4146102f8578063aa2130e114610323576100dd565b8063331bf125146101fe5780634585e33b1461022957806369d8ebf914610252576100dd565b806315ac565f116100bb57806315ac565f146101635780631b9db2ef1461018e5780631fe543e3146101cb5780632cfcc539146101f4576100dd565b806309bc33a7146100e25780630cb4a29d1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761034e565b6040516101049190610d4a565b60405180910390f35b34801561011957600080fd5b50610122610376565b60405161012f9190610de4565b60405180910390f35b34801561014457600080fd5b5061014d61039e565b60405161015a9190610e76565b60405180910390f35b34801561016f57600080fd5b506101786103b5565b6040516101859190610d4a565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610ed1565b6103c1565b6040516101c29190610f1f565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed9190611093565b610408565b005b6101fc6104c8565b005b34801561020a57600080fd5b50610213610637565b6040516102209190611108565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061117e565b61065f565b005b34801561025e57600080fd5b50610267610732565b6040516102749190610d4a565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190611280565b61073c565b6040516102b2929190611363565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190610ed1565b6107e8565b6040516102ef91906113b4565b60405180910390f35b34801561030457600080fd5b5061030d610827565b60405161031a9190610d4a565b60405180910390f35b34801561032f57600080fd5b5061033861084f565b6040516103459190610f1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b60008080549050905090565b60008082815481106103d6576103d56113cf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ba57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104b19291906113fe565b60405180910390fd5b6104c48282610879565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610522576040517fa24c020a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561053657610535610dff565b5b600260009054906101000a900460ff16600181111561055857610557610dff565b5b1461058f576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106796040518060200160405280600081525061073c565b509050806106e85747600080549050600260009054906101000a900460ff1660018111156106aa576106a9610dff565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106df93929190611427565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015442610717919061148d565b111561072d574260018190555061072c610b25565b5b505050565b6000600154905090565b60006060600080600181111561075557610754610dff565b5b600260009054906101000a900460ff16600181111561077757610776610dff565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426107ab919061148d565b119050600080600080549050119050600080471190508380156107cb5750825b80156107d45750815b80156107dd5750805b955050505050915091565b600081815481106107f857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808054905082600081518110610894576108936113cf565b5b60200260200101516108a691906114f0565b9050600081815481106108bc576108bb6113cf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161096f90611552565b60006040518083038185875af1925050503d80600081146109ac576040519150601f19603f3d011682016040523d82523d6000602084013e6109b1565b606091505b50509050806109ec576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a0757610a06610f50565b5b604051908082528060200260200182016040528015610a355781602001602082028036833780820191505090505b5060009080519060200190610a4b929190610c8a565b504260018190555060006001811115610a6757610a66610dff565b5b600260009054906101000a900460ff166001811115610a8957610a88610dff565b5b14610aba576000600260006101000a81548160ff02191690836001811115610ab457610ab3610dff565b5b02179055505b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f294199a1df906669a7ed961cc27178df080080aef83ba06a81b3ebc52374ee4960405160405180910390a250505050565b6001600260006101000a81548160ff02191690836001811115610b4b57610b4a610dff565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610c159594939291906115c6565b6020604051808303816000875af1158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c58919061162e565b9050807fed78291397f3061d19ba61a10be233e58e9e0ff8d4ce49da9dfe865239264f6460405160405180910390a250565b828054828255906000526020600020908101928215610d03579160200282015b82811115610d025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610caa565b5b509050610d109190610d14565b5090565b5b80821115610d2d576000816000905550600101610d15565b5090565b6000819050919050565b610d4481610d31565b82525050565b6000602082019050610d5f6000830184610d3b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610daa610da5610da084610d65565b610d85565b610d65565b9050919050565b6000610dbc82610d8f565b9050919050565b6000610dce82610db1565b9050919050565b610dde81610dc3565b82525050565b6000602082019050610df96000830184610dd5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e3f57610e3e610dff565b5b50565b6000819050610e5082610e2e565b919050565b6000610e6082610e42565b9050919050565b610e7081610e55565b82525050565b6000602082019050610e8b6000830184610e67565b92915050565b6000604051905090565b600080fd5b600080fd5b610eae81610d31565b8114610eb957600080fd5b50565b600081359050610ecb81610ea5565b92915050565b600060208284031215610ee757610ee6610e9b565b5b6000610ef584828501610ebc565b91505092915050565b6000610f0982610d65565b9050919050565b610f1981610efe565b82525050565b6000602082019050610f346000830184610f10565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f8882610f3f565b810181811067ffffffffffffffff82111715610fa757610fa6610f50565b5b80604052505050565b6000610fba610e91565b9050610fc68282610f7f565b919050565b600067ffffffffffffffff821115610fe657610fe5610f50565b5b602082029050602081019050919050565b600080fd5b600061100f61100a84610fcb565b610fb0565b9050808382526020820190506020840283018581111561103257611031610ff7565b5b835b8181101561105b57806110478882610ebc565b845260208401935050602081019050611034565b5050509392505050565b600082601f83011261107a57611079610f3a565b5b813561108a848260208601610ffc565b91505092915050565b600080604083850312156110aa576110a9610e9b565b5b60006110b885828601610ebc565b925050602083013567ffffffffffffffff8111156110d9576110d8610ea0565b5b6110e585828601611065565b9150509250929050565b6000819050919050565b611102816110ef565b82525050565b600060208201905061111d60008301846110f9565b92915050565b600080fd5b60008083601f84011261113e5761113d610f3a565b5b8235905067ffffffffffffffff81111561115b5761115a611123565b5b60208301915083600182028301111561117757611176610ff7565b5b9250929050565b6000806020838503121561119557611194610e9b565b5b600083013567ffffffffffffffff8111156111b3576111b2610ea0565b5b6111bf85828601611128565b92509250509250929050565b600080fd5b600067ffffffffffffffff8211156111eb576111ea610f50565b5b6111f482610f3f565b9050602081019050919050565b82818337600083830152505050565b600061122361121e846111d0565b610fb0565b90508281526020810184848401111561123f5761123e6111cb565b5b61124a848285611201565b509392505050565b600082601f83011261126757611266610f3a565b5b8135611277848260208601611210565b91505092915050565b60006020828403121561129657611295610e9b565b5b600082013567ffffffffffffffff8111156112b4576112b3610ea0565b5b6112c084828501611252565b91505092915050565b60008115159050919050565b6112de816112c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561131e578082015181840152602081019050611303565b60008484015250505050565b6000611335826112e4565b61133f81856112ef565b935061134f818560208601611300565b61135881610f3f565b840191505092915050565b600060408201905061137860008301856112d5565b818103602083015261138a818461132a565b90509392505050565b600061139e82610d65565b9050919050565b6113ae81611393565b82525050565b60006020820190506113c960008301846113a5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506114136000830185610f10565b6114206020830184610f10565b9392505050565b600060608201905061143c6000830186610d3b565b6114496020830185610d3b565b6114566040830184610d3b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149882610d31565b91506114a383610d31565b92508282039050818111156114bb576114ba61145e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114fb82610d31565b915061150683610d31565b925082611516576115156114c1565b5b828206905092915050565b600081905092915050565b50565b600061153c600083611521565b91506115478261152c565b600082019050919050565b600061155d8261152f565b9150819050919050565b600067ffffffffffffffff82169050919050565b61158481611567565b82525050565b600061ffff82169050919050565b6115a18161158a565b82525050565b600063ffffffff82169050919050565b6115c0816115a7565b82525050565b600060a0820190506115db60008301886110f9565b6115e8602083018761157b565b6115f56040830186611598565b61160260608301856115b7565b61160f60808301846115b7565b9695505050505050565b60008151905061162881610ea5565b92915050565b60006020828403121561164457611643610e9b565b5b600061165284828501611619565b9150509291505056fea2646970667358221220ebc7aa1ffff2505ed3a5ac35c5ea840d86df12575a28857ecb5a5ce7073531ee64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063331bf1251161007f5780636e04ff0d116100595780636e04ff0d1461027d5780638df5a6a4146102bb57806391ad27b4146102f8578063aa2130e114610323576100dd565b8063331bf125146101fe5780634585e33b1461022957806369d8ebf914610252576100dd565b806315ac565f116100bb57806315ac565f146101635780631b9db2ef1461018e5780631fe543e3146101cb5780632cfcc539146101f4576100dd565b806309bc33a7146100e25780630cb4a29d1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761034e565b6040516101049190610d4a565b60405180910390f35b34801561011957600080fd5b50610122610376565b60405161012f9190610de4565b60405180910390f35b34801561014457600080fd5b5061014d61039e565b60405161015a9190610e76565b60405180910390f35b34801561016f57600080fd5b506101786103b5565b6040516101859190610d4a565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610ed1565b6103c1565b6040516101c29190610f1f565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed9190611093565b610408565b005b6101fc6104c8565b005b34801561020a57600080fd5b50610213610637565b6040516102209190611108565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061117e565b61065f565b005b34801561025e57600080fd5b50610267610732565b6040516102749190610d4a565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190611280565b61073c565b6040516102b2929190611363565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190610ed1565b6107e8565b6040516102ef91906113b4565b60405180910390f35b34801561030457600080fd5b5061030d610827565b60405161031a9190610d4a565b60405180910390f35b34801561032f57600080fd5b5061033861084f565b6040516103459190610f1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b60008080549050905090565b60008082815481106103d6576103d56113cf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ba57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104b19291906113fe565b60405180910390fd5b6104c48282610879565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610522576040517fa24c020a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561053657610535610dff565b5b600260009054906101000a900460ff16600181111561055857610557610dff565b5b1461058f576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106796040518060200160405280600081525061073c565b509050806106e85747600080549050600260009054906101000a900460ff1660018111156106aa576106a9610dff565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106df93929190611427565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015442610717919061148d565b111561072d574260018190555061072c610b25565b5b505050565b6000600154905090565b60006060600080600181111561075557610754610dff565b5b600260009054906101000a900460ff16600181111561077757610776610dff565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426107ab919061148d565b119050600080600080549050119050600080471190508380156107cb5750825b80156107d45750815b80156107dd5750805b955050505050915091565b600081815481106107f857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808054905082600081518110610894576108936113cf565b5b60200260200101516108a691906114f0565b9050600081815481106108bc576108bb6113cf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161096f90611552565b60006040518083038185875af1925050503d80600081146109ac576040519150601f19603f3d011682016040523d82523d6000602084013e6109b1565b606091505b50509050806109ec576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a0757610a06610f50565b5b604051908082528060200260200182016040528015610a355781602001602082028036833780820191505090505b5060009080519060200190610a4b929190610c8a565b504260018190555060006001811115610a6757610a66610dff565b5b600260009054906101000a900460ff166001811115610a8957610a88610dff565b5b14610aba576000600260006101000a81548160ff02191690836001811115610ab457610ab3610dff565b5b02179055505b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f294199a1df906669a7ed961cc27178df080080aef83ba06a81b3ebc52374ee4960405160405180910390a250505050565b6001600260006101000a81548160ff02191690836001811115610b4b57610b4a610dff565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610c159594939291906115c6565b6020604051808303816000875af1158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c58919061162e565b9050807fed78291397f3061d19ba61a10be233e58e9e0ff8d4ce49da9dfe865239264f6460405160405180910390a250565b828054828255906000526020600020908101928215610d03579160200282015b82811115610d025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610caa565b5b509050610d109190610d14565b5090565b5b80821115610d2d576000816000905550600101610d15565b5090565b6000819050919050565b610d4481610d31565b82525050565b6000602082019050610d5f6000830184610d3b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610daa610da5610da084610d65565b610d85565b610d65565b9050919050565b6000610dbc82610d8f565b9050919050565b6000610dce82610db1565b9050919050565b610dde81610dc3565b82525050565b6000602082019050610df96000830184610dd5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e3f57610e3e610dff565b5b50565b6000819050610e5082610e2e565b919050565b6000610e6082610e42565b9050919050565b610e7081610e55565b82525050565b6000602082019050610e8b6000830184610e67565b92915050565b6000604051905090565b600080fd5b600080fd5b610eae81610d31565b8114610eb957600080fd5b50565b600081359050610ecb81610ea5565b92915050565b600060208284031215610ee757610ee6610e9b565b5b6000610ef584828501610ebc565b91505092915050565b6000610f0982610d65565b9050919050565b610f1981610efe565b82525050565b6000602082019050610f346000830184610f10565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f8882610f3f565b810181811067ffffffffffffffff82111715610fa757610fa6610f50565b5b80604052505050565b6000610fba610e91565b9050610fc68282610f7f565b919050565b600067ffffffffffffffff821115610fe657610fe5610f50565b5b602082029050602081019050919050565b600080fd5b600061100f61100a84610fcb565b610fb0565b9050808382526020820190506020840283018581111561103257611031610ff7565b5b835b8181101561105b57806110478882610ebc565b845260208401935050602081019050611034565b5050509392505050565b600082601f83011261107a57611079610f3a565b5b813561108a848260208601610ffc565b91505092915050565b600080604083850312156110aa576110a9610e9b565b5b60006110b885828601610ebc565b925050602083013567ffffffffffffffff8111156110d9576110d8610ea0565b5b6110e585828601611065565b9150509250929050565b6000819050919050565b611102816110ef565b82525050565b600060208201905061111d60008301846110f9565b92915050565b600080fd5b60008083601f84011261113e5761113d610f3a565b5b8235905067ffffffffffffffff81111561115b5761115a611123565b5b60208301915083600182028301111561117757611176610ff7565b5b9250929050565b6000806020838503121561119557611194610e9b565b5b600083013567ffffffffffffffff8111156111b3576111b2610ea0565b5b6111bf85828601611128565b92509250509250929050565b600080fd5b600067ffffffffffffffff8211156111eb576111ea610f50565b5b6111f482610f3f565b9050602081019050919050565b82818337600083830152505050565b600061122361121e846111d0565b610fb0565b90508281526020810184848401111561123f5761123e6111cb565b5b61124a848285611201565b509392505050565b600082601f83011261126757611266610f3a565b5b8135611277848260208601611210565b91505092915050565b60006020828403121561129657611295610e9b565b5b600082013567ffffffffffffffff8111156112b4576112b3610ea0565b5b6112c084828501611252565b91505092915050565b60008115159050919050565b6112de816112c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561131e578082015181840152602081019050611303565b60008484015250505050565b6000611335826112e4565b61133f81856112ef565b935061134f818560208601611300565b61135881610f3f565b840191505092915050565b600060408201905061137860008301856112d5565b818103602083015261138a818461132a565b90509392505050565b600061139e82610d65565b9050919050565b6113ae81611393565b82525050565b60006020820190506113c960008301846113a5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506114136000830185610f10565b6114206020830184610f10565b9392505050565b600060608201905061143c6000830186610d3b565b6114496020830185610d3b565b6114566040830184610d3b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149882610d31565b91506114a383610d31565b92508282039050818111156114bb576114ba61145e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114fb82610d31565b915061150683610d31565b925082611516576115156114c1565b5b828206905092915050565b600081905092915050565b50565b600061153c600083611521565b91506115478261152c565b600082019050919050565b600061155d8261152f565b9150819050919050565b600067ffffffffffffffff82169050919050565b61158481611567565b82525050565b600061ffff82169050919050565b6115a18161158a565b82525050565b600063ffffffff82169050919050565b6115c0816115a7565b82525050565b600060a0820190506115db60008301886110f9565b6115e8602083018761157b565b6115f56040830186611598565b61160260608301856115b7565b61160f60808301846115b7565b9695505050505050565b60008151905061162881610ea5565b92915050565b60006020828403121561164457611643610e9b565b5b600061165284828501611619565b9150509291505056fea2646970667358221220ebc7aa1ffff2505ed3a5ac35c5ea840d86df12575a28857ecb5a5ce7073531ee64736f6c63430008120033",
  "devdoc": {
    "author": "ejmorian",
    "details": "this implements chainlink VRFV2 and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "A Sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions "
      },
      "getEntranceFee()": {
        "notice": "pure/view "
      }
    },
    "notice": "This contract is for creating a untamperable decentralise smart contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 242,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 244,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_previousTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 247,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)239"
      },
      {
        "astId": 249,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_winner",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)239": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}